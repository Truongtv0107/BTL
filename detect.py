from PyQt6.QtWidgets import QDialog, QVBoxLayout, QPushButton, QFileDialog, QLabel
from ultralytics import YOLO
import cv2
import tkinter as tk


class DetectDialog(QDialog):
    def __init__(self):
        super().__init__()
        self.setWindowTitle("üöó Nh·∫≠n di·ªán ph∆∞∆°ng ti·ªán")
        self.setFixedSize(400, 300)

        # Layout
        layout = QVBoxLayout()
        self.label = QLabel("Ch·ªçn ngu·ªìn ƒë·ªÉ b·∫Øt ƒë·∫ßu nh·∫≠n di·ªán")
        self.btn_camera = QPushButton("üì∑ M·ªü camera")
        self.btn_file = QPushButton("üìÅ M·ªü video t·ª´ file")

        layout.addWidget(self.label)
        layout.addWidget(self.btn_camera)
        layout.addWidget(self.btn_file)
        self.setLayout(layout)

        # N·∫°p m√¥ h√¨nh YOLOv8
        self.model = YOLO("yolov8n.pt")

        # G·∫Øn s·ª± ki·ªán n√∫t
        self.btn_camera.clicked.connect(self.detect_camera)
        self.btn_file.clicked.connect(self.detect_file)

    def detect_camera(self):
        self.run_detect(0)  # 0 = webcam m·∫∑c ƒë·ªãnh

    def detect_file(self):
        path, _ = QFileDialog.getOpenFileName(
            self,
            "Ch·ªçn video",
            "",
            "Video Files (*.mp4 *.avi *.mov)"
        )
        if path:
            self.run_detect(path)

    def run_detect(self, source):
        cap = cv2.VideoCapture(source)
        if not cap.isOpened():
            self.label.setText("‚ùå Kh√¥ng th·ªÉ m·ªü ngu·ªìn video")
            return

        # T√™n c·ª≠a s·ªï
        win_name = "Nh·∫≠n di·ªán ph∆∞∆°ng ti·ªán"
        cv2.namedWindow(win_name, cv2.WINDOW_NORMAL)
        cv2.resizeWindow(win_name, 800, 800)
        cv2.setWindowProperty(win_name, cv2.WND_PROP_FULLSCREEN, cv2.WINDOW_NORMAL)

        # L·∫•y ƒë·ªô ph√¢n gi·∫£i m√†n h√¨nh ƒë·ªÉ canh gi·ªØa
        root = tk.Tk()
        screen_w = root.winfo_screenwidth()
        screen_h = root.winfo_screenheight()
        root.destroy()

        # T√≠nh t·ªça ƒë·ªô ƒë·ªÉ ƒë·∫∑t ch√≠nh gi·ªØa
        x = (screen_w - 800) // 2
        y = (screen_h - 800) // 2
        cv2.moveWindow(win_name, x, y)

        while True:
            ret, frame = cap.read()
            if not ret:
                break

            # Nh·∫≠n di·ªán b·∫±ng YOLO
            results = self.model(frame)
            annotated_frame = results[0].plot()

            # Resize frame ƒë·ªÉ v·ª´a c·ª≠a s·ªï 800x800
            annotated_frame = cv2.resize(annotated_frame, (800, 800))

            cv2.imshow(win_name, annotated_frame)
            if cv2.waitKey(1) & 0xFF == ord('q'):
                break

        cap.release()
        cv2.destroyAllWindows()
